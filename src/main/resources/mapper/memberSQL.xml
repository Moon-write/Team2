<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">
	<select id="selectOneMember" parameterType="m" resultType="m">
	select 
		member_no as memberNo,
		biz_no as bizNo,
		biz_name as bizName,
		member_id as memberId,
		member_pw as memberPw,
		member_name as memberName,
		member_phone as memberPhone,
		member_level as memberLevel,
		member_gender as memberGender,
		member_birth as memberBirth,
		member_postcode as memberPostcode,
		member_addr1 as memberAddr1,
		member_addr2 as memberAddr2,
		member_point as memberPoint
	from member 
	<if test="memberId != null">	
		where member_id=#{memberId} 
	</if>
	<if test="memberPw != null">
	 	and member_pw=#{memberPw}
	</if>
	<if test="bizNo != null">
		where biz_no=#{bizNo}
	</if>
	</select>
	<select id="selectMemberList" parameterType="map" resultType="m">
		select * from 
		(SELECT ROWNUM AS RNUM,C.*FROM
          (SELECT 
			    member_no as memberNo,
				biz_no as bizNo,
				biz_name as bizName,
				member_id as memberId,
				member_pw as memberPw,
				member_name as memberName,
				member_phone as memberPhone,
				member_level as memberLevel,
				member_gender as memberGender,
				member_birth as memberBirth,
				member_postcode as memberPostcode,
				member_addr1 as memberAddr1,
				member_addr2 as memberAddr2,
				member_point as memberPoint
			FROM MEMBER 
			ORDER BY 1 DESC)C)
            where rnum between #{start} and #{end}
	</select>
	<select id="searchMemberList" parameterType="map" resultType="m">
		select * from 
		(SELECT ROWNUM AS RNUM,C.*FROM
          (SELECT 
			    member_no as memberNo,
				biz_no as bizNo,
				biz_name as bizName,
				member_id as memberId,
				member_pw as memberPw,
				member_name as memberName,
				member_phone as memberPhone,
				member_level as memberLevel,
				member_gender as memberGender,
				member_birth as memberBirth,
				member_postcode as memberPostcode,
				member_addr1 as memberAddr1,
				member_addr2 as memberAddr2,
				member_point as memberPoint
			FROM MEMBER WHERE member_id like '%'||#{keyword}||'%' or member_name like '%'||#{keyword}||'%'
			ORDER BY 1 DESC)C)
            where rnum between #{start} and #{end}
	</select>
	<select id="selectMemberCount" resultType="int">
	select count(*) from member
	</select>
	<select id="searchMemberCount" parameterType="String" resultType="int">
	select count(*) from member	where member_id like '%'||#{keyword}||'%' or member_name like '%'||#{keyword}||'%'
	</select>
  	<insert id="insertMember" parameterType="m">
  		insert into member values (member_seq.nextval,
  		<choose>
	 		<when test="memberLevel == 2">
	 		null,null
	 		</when>
	 		<when test="memberLevel == 1">
	 		#{bizNo},#{bizName}
	 		</when>
 		</choose>
  		,#{memberId},#{memberPw},#{memberName},#{memberPhone},#{memberLevel},#{memberGender},#{memberBirth},#{memberPostcode},#{memberAddr1},#{memberAddr2},3000)
  		<!-- insertBoard를 수행하고 나서(order=AFTER) b에 boardNo(keyProperty=boardNo)을 담아서 리턴 -->
		<selectKey resultType="int" order="AFTER" keyProperty="memberNo">
			select max(member_no) from member where member_level=1
		</selectKey>	
  	</insert>
  	<insert id="insertShop" parameterType="int">
  		insert into shop values(shop_seq.nextval,#{memberNo},null,null)
  	</insert>
  	<update id="newPw" parameterType="m">
  		update member set member_pw=#{memberPw} where member_id=#{memberId}
  	</update>
  	<delete id="deleteMember" parameterType="String">
  		delete from member where member_id=#{memberId} 
  	</delete>
  	<update id="memberUpdate" parameterType="m">
  		update member set member_name=#{memberName},member_phone=#{memberPhone},member_postcode=#{memberPostcode},member_addr1=#{memberAddr1},member_addr2=#{memberAddr2}
  			where member_id=#{memberId}
  	</update>
</mapper>
